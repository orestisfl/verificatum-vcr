
/*
 * Copyright 2008-2018 Douglas Wikstrom
 *
 * This file is part of Verificatum Core Routines (VCR).
 *
 * VCR is free software: you can redistribute it and/or modify it
 * under the terms of the GNU Affero General Public License as
 * published by the Free Software Foundation, either version 3 of the
 * License, or (at your option) any later version.
 *
 * VCR is distributed in the hope that it will be useful, but WITHOUT
 * ANY WARRANTY; without even the implied warranty of MERCHANTABILITY
 * or FITNESS FOR A PARTICULAR PURPOSE. See the GNU Affero General
 * Public License for more details.
 *
 * You should have received a copy of the GNU Affero General Public
 * License along with VCR. If not, see <http://www.gnu.org/licenses/>.
 */

package com.verificatum.crypto;

import java.io.File;
import java.io.IOException;

import com.verificatum.eio.EIOException;
import com.verificatum.eio.ExtIO;
import com.verificatum.eio.Marshalizable;
import com.verificatum.eio.Marshalizer;

/**
 * Source of random bytes. This may be a source of physical truly
 * random bits, or the output of a pseudo-random generator.
 *
 * <br>
 *
 * WARNING! All subclasses must ensure that {@link #getBytes(byte[])}
 * is thread safe (synchronized on this). The intention is that a
 * single instance of this class can serve several threads. Thus,
 * there is no need to make all other methods thread safe.
 *
 * @author Douglas Wikstrom
 */
public abstract class RandomSource implements Marshalizable {

    /**
     * Returns <code>length</code> bytes as a <code>byte[]</code>.
     *
     * @param length Number of generated bytes.
     * @return Random bits.
     */
    public byte[] getBytes(final int length) {
        final byte[] result = new byte[length];
        getBytes(result);
        return result;
    }

    /**
     * Fills the input array with random bytes. WARNING! This must be
     * thread safe for all subclasses.
     *
     * @param array Destination of generated bytes.
     */
    public abstract void getBytes(byte[] array);

    /**
     * Fills the input array with random bytes.
     *
     * @param array Destination of generated bytes.
     * @param start Index of position of first generated byte.
     * @param length Number of bytes generated.
     */
    public void getBytes(final byte[] array,
                         final int start,
                         final int length) {
        final byte[] tmp = getBytes(length);
        System.arraycopy(tmp, 0, array, start, length);
    }

    /**
     * Returns an initialized random source as defined by parameters.
     *
     * @param rsFile File containing a string that can be input to
     * {@link Marshalizer#unmarshalHex_RandomSource(String)}.
     * @param seedFile If the random source is a {@link PRG}, then it
     * must contain a sufficiently long seed.
     * @param tmpSeedFile Temporary seed file used to implement atomic
     * write of a new seed.
     * @return Source of random bits.
     * @throws CryptoException If it is not possible to create a
     * random source from the data on the given files.
     */
    public static RandomSource randomSource(final File rsFile,
                                            final File seedFile,
                                            final File tmpSeedFile)
        throws CryptoException {
        try {
            final String rsString = ExtIO.readString(rsFile);
            final RandomSource randomSource =
                Marshalizer.unmarshalHex_RandomSource(rsString);

            // If the random source is a PRG, then there must
            // exist an associated seed file of sufficient length.
            if (randomSource instanceof PRG) {
                ((PRG) randomSource).setSeedReplaceStored(seedFile,
                                                          tmpSeedFile);
            }
            return randomSource;

        } catch (final IOException ioe) {
            throw new CryptoException("Unable to read random source file! ("
                                      + rsFile.toString() + ")",
                                      ioe);
        } catch (final EIOException eioe) {
            final String e = "Unable to create random source! "
                + "Make sure that " + rsFile + " is valid!";
            throw new CryptoException(e, eioe);
        }
    }
}
